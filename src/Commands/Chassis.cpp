// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Chassis.h"
#include "Robotmap.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

Chassis::Chassis(): frc::Command() {
	// Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void Chassis::Initialize() {
	Robot::accel->ResetAccel();

}

// Called repeatedly when this Command is scheduled to run
void Chassis::Execute() {
	Robot::driving->Drive(Robot::oi->joystick1->GetY(),Robot::oi->joystick1->GetTwist());
	frc::SmartDashboard::PutNumber("Y-axis", Robot::oi->joystick1->GetY());
	frc::SmartDashboard::PutNumber("Twist-axis", Robot::oi->joystick1->GetTwist());
	Robot::driving->Gyro();
	frc::SmartDashboard::PutNumber("Accel",Robot::accel->GetDistanceY());
	frc::SmartDashboard::PutNumber("Approaching Target Distance:",(9*Robot::driving->Range()));


	if(Robot::oi->joy2Button1->Get()==true)
		{
			Robot::arm->CloseGripper();
			frc::SmartDashboard::PutBoolean("Open", Robot::oi->joy2Button1->Get());
		}

	else if (Robot::oi->joy2Button2->Get() == true)
		{
			Robot::arm->OpenGripper();
			frc::SmartDashboard::PutBoolean("Close", Robot::oi->joy2Button2->Get());
		}
	if (Robot::oi->joy2Button10->Get() == true){
			Robot::climbing->StartClimbing();
			frc::SmartDashboard::PutBoolean("Close", Robot::oi->joy2Button10->Get());
	}

	else{
			Robot::climbing->StopClimbing();
			frc::SmartDashboard::PutBoolean("Close", Robot::oi->joy2Button10->Get());
	}
}

// Make this return true when this Command no longer needs to run execute()
bool Chassis::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void Chassis::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Chassis::Interrupted() {

}
