// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef ACCEL_H
#define ACCEL_H
#include "Commands/Subsystem.h"
#include "WPILib.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class Accel: public Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
//	std::shared_ptr<BuiltInAccelerometer> cop1;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
public:
	Accel();
	void InitDefaultCommand();
	void InitializeForGravity();
	void ReadAccelerometerX();
	void CalcDistanceX();
	void CalcVelocityX();
	double SmoothAccelX();
	double GetDistanceX();
	void ReadAccelerometerY();
	void CalcDistanceY();
	void CalcVelocityY();
	double SmoothAccelY();
	double GetDistanceY();
	void ResetDistance();
	void ResetAccel();
	void ResetVelocity();

//	BuiltInAccelerometer *accelerometer;
	Timer * accelTimer;
	int index_X = 0;
	int m_timeindex_X = 0;
	int const samples = 31 ;
	int const smoothZeroCounts = 50 ;
	std::vector<double> accelVectorX = {0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,0};// creating a a vector of 31 locations
	std::vector<double> timeVectorX = {0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,0};// creating a a vector of 31 locations
	double m_velocityX = 0.0;
	double m_elapsedTimeX = 0.0;
	double m_deltaTimeX = 0.0;
	double m_CentralDeltaTimeX = 0.0;
	double m_oldTimeX = 0.0;
	double m_averageAccelX = 0.0;
	double m_subtractGravityX = 0.0;  //gravitX is a constant acceleration that we want to subtract or cancel
	double m_TempAccel = 0.0;
	double m_AverageSmoothX = 0.0;
	double m_TotalSmoothX = 0.0;
	int m_Smooth_Reading_Count = 0;
	double m_DistanceX = 0.0;
	// and Y
	int index_Y = 0;
	int m_timeindex_Y = 0;
	std::vector<double> accelVectorY = {0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,0};// creating a a vector of 31 locations
	std::vector<double> timeVectorY = {0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,0};// creating a a vector of 31 locations
	double m_velocityY = 0.0;
	double m_elapsedTimeY = 0.0;
	double m_deltaTimeY = 0.0;
	double m_CentralDeltaTimeY = 0.0;
	double m_oldTimeY = 0.0;
	double m_averageAccelY = 0.0;
	double m_subtractGravityY = 0.0;  //gravity is a constant acceleration that we want to subtract or cancel
	double m_AverageSmoothY = 0.0;
	double m_TotalSmoothY = 0.0;
	double m_DistanceY = 0.0;

};



#endif
