// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Driving.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Driving::Driving() : frc::Subsystem("Driving") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    rightFront = RobotMap::drivingRightFront;
    leftFront = RobotMap::drivingLeftFront;
    leftBack = RobotMap::drivingLeftBack;
    rightBack = RobotMap::drivingRightBack;
    robotDrive41 = RobotMap::drivingRobotDrive41;
    gyro = RobotMap::drivingGyro;
    m_gyroAngle=0;
    m_ultra = 0.0;
    rangeFinder = RobotMap::rangeFinder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Driving::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Driving::Periodic() {
    // Put code here to be run every loop

}

double Driving::Range() {
	for (int i=0; i<20; i++) m_ultra += rangeFinder->GetAverageVoltage();
	m_ultra /= 20;
	return m_ultra;
}
void Driving::Drive(double forward, double twist){

		robotDrive41->ArcadeDrive(forward,-.5*twist, false);
}

double Driving::Gyro(){
	m_gyroAngle = gyro->GetAngle();
	frc::SmartDashboard::PutNumber("Gyro Angle", m_gyroAngle);
	return m_gyroAngle;
}

void Driving::GyroReset(){
	gyro->Reset();
	m_gyroAngle=gyro->GetAngle();
	frc::SmartDashboard::PutNumber("Gyro Angle", m_gyroAngle);
}

void Driving::MaintainHeading(double m_speed,double m_heading){
	m_gyroAngle = gyro->GetAngle();
	robotDrive41->ArcadeDrive(m_speed,-((m_heading-m_gyroAngle)/100), false);
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

