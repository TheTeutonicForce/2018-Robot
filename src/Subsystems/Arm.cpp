// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Arm.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Arm::Arm() : frc::Subsystem("Arm") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    compressor1 = RobotMap::armCompressor1;
    arm = RobotMap::armArm;
    rightGrip = RobotMap::armRightGrip;
    leftGrip = RobotMap::armLeftGrip;
    rightSolenoid = RobotMap::armrightSolenoid;
    leftSolenoid = RobotMap::armleftSolenoid;
    raiseLimitSwitch = RobotMap::raiseSwitch;
    lowerLimitSwitch = RobotMap::lowerSwitch;
    armMotor = RobotMap::armMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Arm::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	//compressor1->SetClosedLoopControl(true);
	//compressor1->SetClosedLoopControl(false);



	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Arm::Periodic() {
    // Put code here to be run every loop

}

void Arm::TurnRightOn(){
	rightSolenoid->Set(true);
}

void Arm::TurnRightOff(){
	rightSolenoid->Set(false);
}

void Arm::CloseGripper(){
	rightSolenoid->Set(true);
	leftSolenoid->Set(true);
}
void Arm::OpenGripper(){
	rightSolenoid->Set(false);
	leftSolenoid->Set(false);

}
void Arm::MoveBody(double height){


	if(raiseLimitSwitch->Get()==false && height < 0){
			armMotor->Set(height);
		}
	else if(lowerLimitSwitch->Get()==false && height < 0){
		armMotor->Set(height);
	}
//	while(raiseLimitSwitch->Get()==false && lowerLimitSwitch->Get()==false)
//	{
//	armMotor->Set(height);
//	}

}

// Put methods for controlling this subsystem
// here. Call these from Commands.

