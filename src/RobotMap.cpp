// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<frc::SpeedController> RobotMap::drivingRightFront;
std::shared_ptr<frc::SpeedController> RobotMap::drivingLeftFront;
std::shared_ptr<frc::SpeedController> RobotMap::drivingLeftBack;
std::shared_ptr<frc::SpeedController> RobotMap::drivingRightBack;
std::shared_ptr<frc::SpeedController> RobotMap::armMotor;
std::shared_ptr<frc::RobotDrive> RobotMap::drivingRobotDrive41;
std::shared_ptr<frc::Compressor> RobotMap::armCompressor1;
std::shared_ptr<frc::Relay> RobotMap::armArm;
std::shared_ptr<frc::Relay> RobotMap::armRightGrip;
std::shared_ptr<frc::Relay> RobotMap::armLeftGrip;
std::shared_ptr<frc::BuiltInAccelerometer> RobotMap::accelCop1;
std::shared_ptr<frc::Solenoid> RobotMap::armrightSolenoid;
std::shared_ptr<frc::Solenoid> RobotMap::armleftSolenoid;

std::shared_ptr<frc::ADXRS450_Gyro> RobotMap::drivingGyro;
std::shared_ptr<frc::DigitalInput> RobotMap::raiseSwitch;
std::shared_ptr<frc::DigitalInput> RobotMap::lowerSwitch;
std::shared_ptr<frc::DigitalInput> RobotMap::upperHangSwitch;
std::shared_ptr<frc::DigitalInput> RobotMap::lowerHangSwitch;
std::shared_ptr<frc::SpeedController> RobotMap::climbMotor;
std::shared_ptr<frc::AnalogInput> RobotMap::rangeFinder;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    frc::LiveWindow *lw = frc::LiveWindow::GetInstance();

    //accelerometer
           accelCop1.reset(new frc::BuiltInAccelerometer());
          // lw->AddSensor("Accel", "Cop1", accelCop1);
          // accelCop1->SetSensitivity(0.0);
          //     accelCop1->SetZero(2.5);


    climbMotor.reset(new frc::Spark(4));

    drivingRightFront.reset(new frc::Spark(1));
    lw->AddActuator("Driving", "Right Front", std::static_pointer_cast<frc::Spark>(drivingRightFront));
    
    drivingLeftFront.reset(new frc::Spark(2));
    lw->AddActuator("Driving", "Left Front", std::static_pointer_cast<frc::Spark>(drivingLeftFront));
    drivingLeftFront->SetInverted(true);

    drivingLeftBack.reset(new frc::Spark(3));
    lw->AddActuator("Driving", "Left Back", std::static_pointer_cast<frc::Spark>(drivingLeftBack));
    drivingLeftBack->SetInverted(true);

    drivingRightBack.reset(new frc::Spark(0));
    lw->AddActuator("Driving", "Right Back", std::static_pointer_cast<frc::Spark>(drivingRightBack));
    
    armMotor.reset(new frc::Spark(5));
    lw->AddActuator("Arm", "Main Arm", std::static_pointer_cast<frc::Spark>(armMotor));

    drivingRobotDrive41.reset(new frc::RobotDrive(drivingLeftFront, drivingLeftBack,
              drivingRightFront, drivingRightBack));
    
    drivingRobotDrive41->SetSafetyEnabled(true);
        drivingRobotDrive41->SetExpiration(0.1);
        drivingRobotDrive41->SetSensitivity(0.5);
        drivingRobotDrive41->SetMaxOutput(1.0);

    armCompressor1.reset(new frc::Compressor(0));
    lw->AddActuator("Arm", "Compressor 1", armCompressor1);
    
   /* armArm.reset(new frc::Relay(0));
    lw->AddActuator("Arm", "Arm", armArm);
    
    armRightGrip.reset(new frc::Relay(1));
    lw->AddActuator("Arm", "Right Grip", armRightGrip);
    
    armLeftGrip.reset(new frc::Relay(2));
    lw->AddActuator("Arm", "Left Grip", armLeftGrip);
    */
    armrightSolenoid.reset(new frc::Solenoid(0));
    armleftSolenoid.reset(new frc::Solenoid(1));


    drivingGyro.reset(new frc::ADXRS450_Gyro);

    raiseSwitch.reset(new frc::DigitalInput(0));
    lowerSwitch.reset(new frc::DigitalInput(1));
    upperHangSwitch.reset(new frc::DigitalInput(2));
    lowerHangSwitch.reset(new frc::DigitalInput(3));

    rangeFinder.reset(new AnalogInput(0));
    lw->AddSensor("Driving", "Range Finder", rangeFinder);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
